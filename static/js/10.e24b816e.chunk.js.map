{"version":3,"sources":["libs/validationSchema.js","components/form/form.js","components/pages/contact/contact.js"],"names":["validationSchema","yup","shape","name","min","required","email","message","ContactForm","useState","isActive","setIsActive","loading","setLoading","thanksBlock","className","initialValues","validateOnBlur","onSubmit","values","resetForm","setTimeout","fetch","method","headers","body","JSON","stringify","then","errors","touched","handleChange","handleBlur","isValid","handleSubmit","dirty","autoComplete","type","placeholder","value","onChange","onBlur","as","disabled","Contact","to","from","attributeName"],"mappings":"2KAceA,EAZUC,MAAaC,MAAM,CACxCC,KAAMF,MACOG,IAAI,EAAG,+BACPC,SAAS,0BACtBC,MAAOL,MACEK,MAAM,oBACND,SAAS,4BAClBE,QAASN,MACIG,IAAI,EAAG,gCACPC,SAAS,+B,eC4FXG,EAlGK,WAChB,MAAgCC,oBAAS,GAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAA8BF,oBAAS,GAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KACMC,EACM,sBAAKC,UAAU,cAAf,UACI,oBAAIA,UAAU,qBAAd,8CACA,mBAAGA,UAAU,wBAAb,uDAGhB,OAAKL,GAAYE,EACN,cAAC,IAAD,IACCF,EAIR,cAAC,IAAD,CACIM,cAAe,CACXb,KAAM,GACNG,MAAO,GACPC,QAAS,IAEbU,gBAAc,EACdC,SAAU,SAACC,EAAD,IACNC,EAD+B,EAAfA,aAEhBT,GAAY,GACZE,GAAW,GACXQ,YAAW,WACPC,MAAM,mBAAoB,CACtBC,OAAQ,OACRC,QAAS,CACL,eAAgB,oBAEpBC,KAAMC,KAAKC,UAAUR,KAExBS,MAAK,WACFf,GAAW,GACXQ,YAAW,WACPV,GAAY,KACb,UAET,MAGNX,iBAAkBA,EA5BtB,SA8BC,gBAAEmB,EAAF,EAAEA,OAAQU,EAAV,EAAUA,OAAQC,EAAlB,EAAkBA,QAASC,EAA3B,EAA2BA,aAAcC,EAAzC,EAAyCA,WAAYC,EAArD,EAAqDA,QAASC,EAA9D,EAA8DA,aAAcC,EAA5E,EAA4EA,MAA5E,OACG,cAAC,IAAD,CAAMpB,UAAU,OAAOG,SAAUgB,EAAaE,aAAa,MAA3D,SACI,qBAAIrB,UAAU,aAAd,UACI,qBAAIA,UAAU,aAAd,UACKe,EAAQ3B,MAAQ0B,EAAO1B,MAAQ,mBAAGY,UAAU,cAAb,SAA4Bc,EAAO1B,OACnE,cAAC,IAAD,CACIkC,KAAK,OACLtB,UAAU,cACVuB,YAAY,YACZnC,KAAK,OACLoC,MAAOpB,EAAOhB,KACdqC,SAAUT,EACVU,OAAQT,EACRI,aAAa,gBAGrB,qBAAIrB,UAAU,aAAd,UACKe,EAAQxB,OAASuB,EAAOvB,OAAS,mBAAGS,UAAU,cAAb,SAA4Bc,EAAOvB,QACrE,cAAC,IAAD,CACI+B,KAAK,OACLtB,UAAU,cACVuB,YAAY,aACZnC,KAAK,QACLoC,MAAOpB,EAAOb,MACdkC,SAAUT,EACVU,OAAQT,EACRI,aAAa,gBAGrB,qBAAIrB,UAAU,aAAd,UACKe,EAAQvB,SAAWsB,EAAOtB,SAAW,mBAAGQ,UAAU,cAAb,SAA4Bc,EAAOtB,UACzE,cAAC,IAAD,CACImC,GAAG,WACH3B,UAAU,iBACVuB,YAAY,eACZnC,KAAK,eAGb,oBAAIY,UAAU,aAAd,SACI,wBACIsB,KAAK,SACLtB,UAAU,eACV4B,UAAWV,IAAYE,EAH3B,oCAxERrB,GCAD8B,UAbC,WACZ,OACI,cAAC,IAAD,CAASC,GAAG,IAAIC,KAAK,IAAIC,cAAc,UAAvC,SACI,yBAAShC,UAAU,UAAnB,SACI,sBAAKA,UAAU,YAAf,UACI,oBAAIA,UAAU,uBAAd,wBACA,cAAC,EAAD","file":"static/js/10.e24b816e.chunk.js","sourcesContent":["import * as yup from 'yup';\r\n\r\nconst validationSchema = yup.object().shape({\r\n    name: yup.string()\r\n                .min(2, 'The name cannot be so short')\r\n                .required('Enter Your name please'),\r\n    email: yup.string()\r\n            .email('Incorrect E-mail')\r\n            .required('Enter Your E-mail please'),\r\n    message: yup.string()\r\n                .min(2, 'Please enter correct message')\r\n                .required('Enter Your message please')\r\n});\r\n\r\nexport default validationSchema;","import React, {useState} from 'react';\r\nimport {Formik, Form, Field} from 'formik';\r\nimport validationSchema from '../../libs/validationSchema';\r\nimport Spinner from '../spinner/spinner';\r\n\r\nconst ContactForm = () => {\r\n    const [isActive, setIsActive] = useState(true);\r\n    const [loading, setLoading] = useState(false);\r\n    const thanksBlock = (\r\n                <div className=\"form-thanks\">\r\n                    <h2 className=\"form-thanks__title\">Thank you for leaving a message.</h2>\r\n                    <p className=\"form-thanks__subtitle\">I will contact you as soon as possible</p>\r\n                </div>\r\n    );\r\n    if (!isActive && loading) {\r\n        return <Spinner/>\r\n    } else if (!isActive) {\r\n         return thanksBlock;\r\n    }\r\n    return (\r\n        <Formik\r\n            initialValues={{\r\n                name: '',\r\n                email: '',\r\n                message: ''\r\n            }}\r\n            validateOnBlur\r\n            onSubmit={(values, {resetForm}) => {\r\n                resetForm();\r\n                setIsActive(false);\r\n                setLoading(true);\r\n                setTimeout(() => {\r\n                    fetch('mailer/smart.php', {\r\n                        method: 'POST',\r\n                        headers: {\r\n                            'Content-Type': 'Application/json'\r\n                        },\r\n                        body: JSON.stringify(values)\r\n                    })\r\n                    .then(() => {\r\n                        setLoading(false);\r\n                        setTimeout(() => {\r\n                            setIsActive(true);\r\n                        }, 5000)\r\n                    });\r\n                },1000)\r\n               \r\n            }}\r\n            validationSchema={validationSchema}\r\n        >\r\n        {({values, errors, touched, handleChange, handleBlur, isValid, handleSubmit, dirty}) => (\r\n            <Form className=\"form\" onSubmit={handleSubmit}autoComplete=\"off\">\r\n                <ul className=\"form__list\">\r\n                    <li className=\"form__item\">\r\n                        {touched.name && errors.name && <p className=\"form__error\">{errors.name}</p>}\r\n                        <Field \r\n                            type=\"text\" \r\n                            className=\"form__input\"\r\n                            placeholder=\"Your name\"\r\n                            name=\"name\"\r\n                            value={values.name}\r\n                            onChange={handleChange}\r\n                            onBlur={handleBlur}\r\n                            autoComplete=\"new-name\"\r\n                        />\r\n                    </li>\r\n                    <li className=\"form__item\">\r\n                        {touched.email && errors.email && <p className=\"form__error\">{errors.email}</p>}\r\n                        <Field \r\n                            type=\"text\"\r\n                            className=\"form__input\"\r\n                            placeholder=\"Your email\"\r\n                            name=\"email\"\r\n                            value={values.email}\r\n                            onChange={handleChange}\r\n                            onBlur={handleBlur}\r\n                            autoComplete=\"new-mail\"\r\n                        />\r\n                    </li>\r\n                    <li className=\"form__item\">\r\n                        {touched.message && errors.message && <p className=\"form__error\">{errors.message}</p>}\r\n                        <Field \r\n                            as=\"textarea\"\r\n                            className=\"form__textarea\"\r\n                            placeholder=\"Your message\"\r\n                            name=\"message\"\r\n                        ></Field>\r\n                    </li>\r\n                    <li className=\"form__item\">\r\n                        <button \r\n                            type=\"submit\" \r\n                            className=\"form__button\"\r\n                            disabled={!isValid && !dirty}\r\n                        >Send Message\r\n                        </button>\r\n                    </li>\r\n                </ul>\r\n        </Form>\r\n        )}\r\n    </Formik>\r\n    );\r\n};\r\n\r\nexport default ContactForm;","import React from 'react';\r\nimport Animate from 'react-smooth';\r\nimport ContactForm from '../../form/form';\r\n\r\nconst Contact = () => {\r\n    return (\r\n        <Animate to=\"1\" from=\"0\" attributeName=\"opacity\">\r\n            <section className=\"contact\">\r\n                <div className=\"container\">\r\n                    <h2 className=\"contact__title title\">Contact me</h2>\r\n                    <ContactForm/>\r\n                </div>\r\n            </section>\r\n        </Animate>\r\n    );\r\n};\r\n\r\nexport default Contact;"],"sourceRoot":""}